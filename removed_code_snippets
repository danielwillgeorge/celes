#     Remove this part of the code to determine the playlist items count / 50.
#     playlist_item_count = youtube.playlistItems().list(
#     playlistId=likes_list_id,
#     part="id"
#     ).execute()
      
#     count = playlist_item_count["pageInfo"]
#     count = count.get("totalResults")
#     n = count/50
#     if count % 50 != 0:
#       n = n + 1
#     for likes_list_id in likes_list_ids:

# 	storage = Storage("static/main.py-oauth2.json")
# 	credentials = storage.get()
# 	json_data = open("static/youtube-v3-discoverydocument.json")
# 	doc = json.load(json_data)
	#http=credentials.authorize(httplib2.Http()))
	
	#Don't need to load the doc variable with the JSON discoverydocument file.  Simply providing the API key is sufficient for
	#connecting to the YouTube API on Google App Engine.

# 1st attempt with Google App Engine and
# the YouTube Data API.
# 	for channelId in channel_list:
# 
# 		channels_response = youtube.channels().list(id=channelId, part="contentDetails").execute()
# 	
# 		for channel in channels_response["items"]:
# 	
# 			try:
# 				uploads_list_id = channel["contentDetails"]["relatedPlaylists"]["likes"]
# 			except KeyError:
# 				pass
# 
# 			try:
# 				playlistitems_list_request = youtube.playlistItems().list(playlistId=uploads_list_id, part="snippet", maxResults=50)
# 			except NameError:
# 				pass
# 		
# 			try:
# 				while playlistitems_list_request:
# 					try:
# 						playlistitems_list_response = playlistitems_list_request.execute()
# 					except HttpError:
# 						pass
# 						# Print information about each video.
# 					for playlist_item in playlistitems_list_response["items"]:
# 					#title = playlist_item["snippet"]["title"]
# 						video_id = playlist_item["snippet"]["resourceId"]["videoId"]
# 						video_list_uploads.append([video_id])
# 					try:
# 						playlistitems_list_request = youtube.playlistItems().list_next(playlistitems_list_request, playlistitems_list_response)
# 					except HttpError:
# 						pass
# 			except NameError:
# 				pass



# Sample experiment to connect to Google Cloud SQL db (successful).
#   cursor = db.cursor()
#   cursor.execute("""TRUNCATE sheepdog.videoIds_sample;""")
#   db.commit()
#   cursor.execute("""INSERT INTO sheepdog.videoIds_sample (videoId) VALUES ('TjqH3XiiUF8'),('Hc0ZPYhl_VE');""")
#   db.commit()

# Insert user data into Google Cloud SQL db - this is the WRONG way to do it.  Better way is in the current code.
# It involves the use of the "get_json" method on the request object, instead of the "json" method.
#   cursor.execute("""INSERT INTO sheepdog.users (name, email) VALUES %s, %s;""", [request.json["name"], request.json["email"]])
#   db.commit()


# removed /user handler on 12/10/15
# @app.route('/user')
# def user():
# 	#establish a connection to the Google Cloud SQL db
# 	env = os.getenv('SERVER_SOFTWARE')
# 	if (env and env.startswith('Google App Engine/')):
#   	# Connecting from App Engine
#   		db = MySQLdb.connect(
#     	unix_socket='/cloudsql/peppy-linker-102423:daniel-george',
#     	user='root',
#     	db='sheepdog')
# 	else:
#   	# You may also assign an IP Address from the access control
#   	# page and use it to connect from an external network.
#   		pass
# 
# 	cursor = db.cursor()
# 	
# 	#truncate the videoIds table
# 	cursor.execute("""TRUNCATE sheepdog.videoIds;""")
# 	db.commit()
# 
# 	#create a batch request instance
# 	batch = BatchHttpRequest()
# 
# # 	uniques = ['UCXqK1FO9yS8x7CMGkzLgJmA']
# 
# 	#get the list of uploaded videoIds for the user
# 	f = get_upload_list(youtube,"UCXqK1FO9yS8x7CMGkzLgJmA")
# 	
# 	#insert the list of uploads into the table user_uploads
# 	for video_id in f:
# 	  cursor.execute("""INSERT INTO sheepdog.user_uploads (videoId) VALUES (%s);""", [video_id])
# 	  db.commit()
# 	
# 	#get the comments for each of the uploads
#  	for videoId in f:
#  	  request = get_comments(youtube, videoId, "UCXqK1FO9yS8x7CMGkzLgJmA")
#  	  
# 	  def list1(request_id,response,exception):
# 		for item in response["items"]:
# 		  comment = item["snippet"]["topLevelComment"]
# 		  try:
# 		    authorChannelId = comment["snippet"]["authorChannelId"]
# 		    channel = authorChannelId.get("value")
# 		  except KeyError:
# 		    pass
# 		  channel_list_.append(channel)
# 		  
# 	  batch.add(request, callback=list1)
# 
# 	batch.execute(http=http)
# 	
# 	uniques = list(set(channel_list_))
# 	uniques.sort()
# 	
# 	time.sleep(1)
# 	
# 	#now, we have a list of the unique commenters for the primary user
#  		
# 	#create a blank video_list for storage later
# 	video_list = []
# 	for channelId in uniques[:1]:
# 	  tokens = ["","CDIQAA","CGQQAA","CJYBEAA","CMgBEAA","CPoBEAA","CKwCEAA","CN4CEAA","CJADEAA","CMIDEAA","CPQDEAA","CKYEEAA", "CNgEEAA", "CIoFEAA", "CLwFEAA", "CO4FEAA", "CKAGEAA", "CNIGEAA", "CIQHEAA", "CLYHEAA", "COgHEAA", "CJoIEAA", "CMwIEAA", "CP4IEAA", "CLAJEAA", "COIJEAA", "CJQKEAA", "CMYKEAA", "CPgKEAA", "CKoLEAA", "CNwLEAA", "CI4MEAA", "CMAMEAA", "CPIMEAA", "CKQNEAA", "CNYNEAA", "CIgOEAA", "CLoOEAA", "COwOEAA", "CJ4PEAA", "CNAPEAA", "CIIQEAA", "CLQQEAA", "COYQEAA", "CJgREAA", "CMoREAA", "CPwREAA", "CK4SEAA", "COASEAA", "CJITEAA", "CMQTEAA", "CPYTEAA", "CKgUEAA", "CNoUEAA", "CIwVEAA", "CL4VEAA", "CPAVEAA", "CKIWEAA", "CNQWEAA", "CIYXEAA", "CLgXEAA", "COoXEAA", "CJwYEAA", "CM4YEAA", "CIAZEAA", "CLIZEAA", "COQZEAA", "CJYaEAA", "CMgaEAA", "CPoaEAA", "CKwbEAA", "CN4bEAA", "CJAcEAA", "CMIcEAA", "CPQcEAA", "CKYdEAA", "CNgdEAA", "CIoeEAA", "CLweEAA", "CO4eEAA", "CKAfEAA", "CNIfEAA", "CIQgEAA", "CLYgEAA", "COggEAA", "CJohEAA", "CMwhEAA", "CP4hEAA", "CLAiEAA", "COIiEAA", "CJQjEAA", "CMYjEAA", "CPgjEAA", "CKokEAA", "CNwkEAA", "CI4lEAA", "CMAlEAA", "CPIlEAA", "CKQmEAA", "CNYmEAA", ]
# 
# 	  #Retrieve the contentDetails part of the channel resource for the
# 	  #authenticated user's channel.
# 	  channels_response = youtube.channels().list(
# 		id=channelId, 
# 		part="contentDetails"
# 	  ).execute()
# 
# 	  for channel in channels_response["items"]:
# 		try:
# 		  likes_list_id = channel["contentDetails"]["relatedPlaylists"]["likes"]
# 		except KeyError:
# 		  break
# 		  
# 		playlist_item_count = youtube.playlistItems().list(
# 		playlistId=likes_list_id,
# 		part="id"
# 		).execute()
# 	
# 		count = playlist_item_count["pageInfo"]
# 		count = count.get("totalResults")
# 		n = count/50
# 		if count % 50 != 0:
# 		  n = n + 1
# 		
# 		for token in tokens[:n]:
#   
# 		  try:
# 			playlistitems_list_request = youtube.playlistItems().list(
# 			  playlistId=likes_list_id, 
# 			  part="snippet",
# 			  pageToken="", 
# 			  maxResults=50)	  
# 		  except NameError:
# 			break
# 
# 		  def list1(request_id,response,exception):
# 			for playlist_item in response["items"]:
# 			  video_id = playlist_item["snippet"]["resourceId"]["videoId"]
# 			  cursor.execute("""INSERT INTO sheepdog.videoIds (videoId) VALUES (%s);""", [video_id])
# 			  db.commit()
# 		  batch.add(playlistitems_list_request, callback=list1)
# 	
#  	  batch.execute(http=http)
# 
#     videoIds=["http://youtube.com/watch?v=WYodBfRxKWI","http://youtube.com/watch?v=z1PoNhYb3K4","http://youtube.com/watch?v=Kcwo_mhyqTw","http://youtube.com/watch?v=C7dxBlTC_9c","http://youtube.com/watch?v=PPdE3rbqf_Q","http://youtube.com/watch?v=4oEvM9-XhP8","http://youtube.com/watch?v=R1VUrOxRUsE","http://youtube.com/watch?v=3mKNyqK1CMI","http://youtube.com/watch?v=gkRDqSeCFes","http://youtube.com/watch?v=piW59SBH8KY"]
#     channelIds=["UCudeRz9YntRrmKBSqnHyKGQ","UCGCPAOQDZa_TTTXDr5byjww","UCGCPAOQDZa_TTTXDr5byjww","UC9gFih9rw0zNCK3ZtoKQQyA","UCN9wHzrHRdKVzCSeV-5RuzA","UCudeRz9YntRrmKBSqnHyKGQ","UCIiBf-JbtCazHSFqXV4JgoA","UCeNfkWyfEXpZ8d1DmvwDt_w","UCfm4y4rHF5HGrSr-qbvOwOg",""]
#     urls=["https://i.ytimg.com/vi/WYodBfRxKWI/default.jpg","https://i.ytimg.com/vi/z1PoNhYb3K4/default.jpg","https://i.ytimg.com/vi/Kcwo_mhyqTw/default.jpg","https://i.ytimg.com/vi/C7dxBlTC_9c/default.jpg","https://i.ytimg.com/vi/PPdE3rbqf_Q/default.jpg","https://i.ytimg.com/vi/4oEvM9-XhP8/default.jpg","https://i.ytimg.com/vi/R1VUrOxRUsE/default.jpg","https://i.ytimg.com/vi/3mKNyqK1CMI/default.jpg","https://i.ytimg.com/vi/gkRDqSeCFes/default.jpg",""]
#     titles=["Video 1","Video 2","Video 3","Video 4","Video 5","Video 6","Video 7","Video 8","Video 9","Video 10"]
#     return render_template('user.html', videoIds=videoIds, channelIds=channelIds, urls=urls, titles=titles)
